memory[0]=8454154
memory[1]=8519691
memory[2]=8585228
memory[3]=8650765
memory[4]=17825796
memory[5]=1638403
memory[6]=1310722
memory[7]=16842748
memory[8]=29360128
memory[9]=25165824
memory[10]=6
memory[11]=4
memory[12]=0
memory[13]=-1

@@@
state:
	pc 0
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 0
		reg[ 2 ] 0
		reg[ 3 ] 0
		reg[ 4 ] 0
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 0, Instruction = 8454154, Opcode = 2
LW: reg[1] = mem[10]

@@@
state:
	pc 1
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 0
		reg[ 3 ] 0
		reg[ 4 ] 0
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 1, Instruction = 8519691, Opcode = 2
LW: reg[2] = mem[11]

@@@
state:
	pc 2
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 4
		reg[ 3 ] 0
		reg[ 4 ] 0
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 2, Instruction = 8585228, Opcode = 2
LW: reg[3] = mem[12]

@@@
state:
	pc 3
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 4
		reg[ 3 ] 0
		reg[ 4 ] 0
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 3, Instruction = 8650765, Opcode = 2
LW: reg[4] = mem[13]

@@@
state:
	pc 4
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 4
		reg[ 3 ] 0
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 4, Instruction = 17825796, Opcode = 4
BEQ: Checking if reg[2] == reg[0]
BEQ: No jump, registers are not equal.

@@@
state:
	pc 5
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 4
		reg[ 3 ] 0
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 5, Instruction = 1638403, Opcode = 0
ADD: reg[3] = reg[3] + reg[1]

@@@
state:
	pc 6
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 4
		reg[ 3 ] 6
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 6, Instruction = 1310722, Opcode = 0
ADD: reg[2] = reg[2] + reg[4]

@@@
state:
	pc 7
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 3
		reg[ 3 ] 6
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 7, Instruction = 16842748, Opcode = 4
BEQ: Checking if reg[0] == reg[0]
BEQ: Jump to new PC = 3

@@@
state:
	pc 4
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 3
		reg[ 3 ] 6
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 4, Instruction = 17825796, Opcode = 4
BEQ: Checking if reg[2] == reg[0]
BEQ: No jump, registers are not equal.

@@@
state:
	pc 5
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 3
		reg[ 3 ] 6
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 5, Instruction = 1638403, Opcode = 0
ADD: reg[3] = reg[3] + reg[1]

@@@
state:
	pc 6
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 3
		reg[ 3 ] 12
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 6, Instruction = 1310722, Opcode = 0
ADD: reg[2] = reg[2] + reg[4]

@@@
state:
	pc 7
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 2
		reg[ 3 ] 12
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 7, Instruction = 16842748, Opcode = 4
BEQ: Checking if reg[0] == reg[0]
BEQ: Jump to new PC = 3

@@@
state:
	pc 4
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 2
		reg[ 3 ] 12
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 4, Instruction = 17825796, Opcode = 4
BEQ: Checking if reg[2] == reg[0]
BEQ: No jump, registers are not equal.

@@@
state:
	pc 5
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 2
		reg[ 3 ] 12
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 5, Instruction = 1638403, Opcode = 0
ADD: reg[3] = reg[3] + reg[1]

@@@
state:
	pc 6
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 2
		reg[ 3 ] 18
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 6, Instruction = 1310722, Opcode = 0
ADD: reg[2] = reg[2] + reg[4]

@@@
state:
	pc 7
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 1
		reg[ 3 ] 18
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 7, Instruction = 16842748, Opcode = 4
BEQ: Checking if reg[0] == reg[0]
BEQ: Jump to new PC = 3

@@@
state:
	pc 4
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 1
		reg[ 3 ] 18
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 4, Instruction = 17825796, Opcode = 4
BEQ: Checking if reg[2] == reg[0]
BEQ: No jump, registers are not equal.

@@@
state:
	pc 5
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 1
		reg[ 3 ] 18
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 5, Instruction = 1638403, Opcode = 0
ADD: reg[3] = reg[3] + reg[1]

@@@
state:
	pc 6
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 1
		reg[ 3 ] 24
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 6, Instruction = 1310722, Opcode = 0
ADD: reg[2] = reg[2] + reg[4]

@@@
state:
	pc 7
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 0
		reg[ 3 ] 24
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 7, Instruction = 16842748, Opcode = 4
BEQ: Checking if reg[0] == reg[0]
BEQ: Jump to new PC = 3

@@@
state:
	pc 4
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 0
		reg[ 3 ] 24
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 4, Instruction = 17825796, Opcode = 4
BEQ: Checking if reg[2] == reg[0]
BEQ: Jump to new PC = 8

@@@
state:
	pc 9
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 0
		reg[ 3 ] 24
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
PC = 9, Instruction = 25165824, Opcode = 6
machine halted
total of 22 instructions executed
final state of machine:

@@@
state:
	pc 9
	memory:
		mem[ 0 ] 8454154
		mem[ 1 ] 8519691
		mem[ 2 ] 8585228
		mem[ 3 ] 8650765
		mem[ 4 ] 17825796
		mem[ 5 ] 1638403
		mem[ 6 ] 1310722
		mem[ 7 ] 16842748
		mem[ 8 ] 29360128
		mem[ 9 ] 25165824
		mem[ 10 ] 6
		mem[ 11 ] 4
		mem[ 12 ] 0
		mem[ 13 ] -1
	registers:
		reg[ 0 ] 0
		reg[ 1 ] 6
		reg[ 2 ] 0
		reg[ 3 ] 24
		reg[ 4 ] -1
		reg[ 5 ] 0
		reg[ 6 ] 0
		reg[ 7 ] 0
end state
